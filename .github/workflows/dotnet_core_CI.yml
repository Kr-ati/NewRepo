# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: def

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 6.0
      env:
        DOTNET_INSTALL_DIR: D:\dotnet
        
    - name: Restore dependencies
      run: dotnet restore
        
    - name: Build
      run: dotnet build --no-restore
      #updated
    - name: Test
      run: dotnet test tests/UnitTests/UnitTests.csproj --configuration Debug --no-build --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=opencover

    - name: Extract Code Coverage Percentage
      id: coverage
      shell: powershell # Use PowerShell Core
      run: |
        if (-not (Test-Path "tests\UnitTests\coverage.opencover.xml")) {
          Write-Host "Coverage file not found!"
          exit 1
        }

        # Initialize COVERAGE to ensure it's empty before use
        $COVERAGE = ""

        # Read the coverage value from the XML file
        $coverageLine = Get-Content "tests\UnitTests\coverage.opencover.xml" | Select-String "sequenceCoverage"
        if ($coverageLine) {
          $COVERAGE = $coverageLine -replace '.*\\', ''  # Extract the value after the last backslash
        }

        # Display extracted coverage value
        Write-Host "Extracted Code Coverage: $COVERAGE"

        # Save the variable to GITHUB_ENV
        echo "percentage=$COVERAGE" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

        # Optionally, display the value for debugging purposes
        Write-Host "Final Coverage Value: $COVERAGE"
  
    - name: Display Code Coverage
      shell: pwsh  # Use PowerShell Core
      run: |
        Write-Host "Coverage is $env:percentage%"

    - name: Verify Coverage Threshold
      shell: pwsh  # Use PowerShell Core
      run: |
        $threshold = 80
        if ([int]$env:percentage -lt $threshold) {
            Write-Host "Coverage $env:percentage% is below the threshold ($threshold%)."
            exit 1
        }
