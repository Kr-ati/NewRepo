# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: def

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 6.0
      env:
        DOTNET_INSTALL_DIR: D:\dotnet

# test step 
    - name: Set Coverage Variable
      shell: pwsh
      run: |
        # Assuming COVERAGE is the variable you want to save
        $COVERAGE = "85"  # Replace this with your actual coverage value extraction logic

        # Save the variable to GITHUB_ENV
        echo "COVERAGE=$COVERAGE" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
    
    - name: Restore dependencies
      run: dotnet restore
        
    - name: Build
      run: dotnet build --no-restore
      #updated
    - name: Test
      run: dotnet test tests/UnitTests/UnitTests.csproj --configuration Debug --no-build --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=opencover

    - name: Extract Code Coverage Percentage
      id: coverage
      shell: cmd
      run: |
        @echo off
        setlocal enabledelayedexpansion

        if not exist "tests\UnitTests\coverage.opencover.xml" (
            echo Coverage file not found!
            exit /b 1
        )

        set "COVERAGE="  :: Initialize COVERAGE to ensure it's empty before use
        for /f "tokens=2 delims=\" %%A in ('findstr "sequenceCoverage" tests\UnitTests\coverage.opencover.xml') do (
            set "COVERAGE=%%A"
        )

        :: After the loop, use normal variable expansion to access COVERAGE
        echo Extracted Code Coverage: !COVERAGE!
    
        :: Use delayed expansion to write to GITHUB_ENV
        echo percentage=!COVERAGE! >> %GITHUB_ENV%

        :: Optionally, display the value for debugging purposes
        echo Final Coverage Value: !COVERAGE!

        endlocal
        
    - name: Display Code Coverage
      shell: cmd
      run: |
        echo Coverage is %percentage% %

    - name: Verify Coverage Threshold
      shell: cmd
      run: |
          set /a threshold=80
          if %percentage% LSS %threshold% (
              echo Coverage %percentage% is below the threshold (%threshold%).
              exit /b 1
          )
